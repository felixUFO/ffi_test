Running tests/ffi/abi_specific_int_incomplete_aot_test.dart
Passed: tests/ffi/abi_specific_int_incomplete_aot_test.dart
Running tests/ffi/abi_specific_int_incomplete_jit_test.dart
Passed: tests/ffi/abi_specific_int_incomplete_jit_test.dart
Running tests/ffi/abi_specific_int_test.dart
Passed: tests/ffi/abi_specific_int_test.dart
Running tests/ffi/abi_test.dart

Unhandled exception:
Expect.equals(expected: <macos_simarm64>, actual: <macos_arm64>) fails.
#0      Expect._fail (package:expect/expect.dart:696:5)
#1      Expect.equals (package:expect/expect.dart:117:7)
#2      testPlatformVersionCompatibility (file:///Users/eseidel/Documents/GitHub/dart-sdk/sdk/tests/ffi/abi_test.dart:23:10)
#3      main (file:///Users/eseidel/Documents/GitHub/dart-sdk/sdk/tests/ffi/abi_test.dart:12:3)
#4      _delayEntrypointInvocation.<anonymous closure> (dart:isolate-patch/isolate_patch.dart:296:19)
#5      _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:189:12)

Failed: tests/ffi/abi_test.dart
Running tests/ffi/aliasing_test.dart
Passed: tests/ffi/aliasing_test.dart
Running tests/ffi/allocator_test.dart
Passed: tests/ffi/allocator_test.dart
Running tests/ffi/bool_test.dart
Passed: tests/ffi/bool_test.dart
Running tests/ffi/c_types_test.dart
Passed: tests/ffi/c_types_test.dart
Running tests/ffi/calloc_test.dart
Passed: tests/ffi/calloc_test.dart
Running tests/ffi/data_not_asan_test.dart
Passed: tests/ffi/data_not_asan_test.dart
Running tests/ffi/data_test.dart
Passed: tests/ffi/data_test.dart
Running tests/ffi/dylib_isolates_test.dart
Passed: tests/ffi/dylib_isolates_test.dart
Running tests/ffi/expando_test.dart
Passed: tests/ffi/expando_test.dart
Running tests/ffi/extension_methods_test.dart
Passed: tests/ffi/extension_methods_test.dart
Running tests/ffi/external_typed_data_test.dart
Passed: tests/ffi/external_typed_data_test.dart
Running tests/ffi/ffi_callback_unique_test.dart
Passed: tests/ffi/ffi_callback_unique_test.dart
Running tests/ffi/ffi_native_test.dart
Passed: tests/ffi/ffi_native_test.dart
Running tests/ffi/finalizer_external_size_accounting_test.dart

../../runtime/vm/simulator_arm64.cc: 955: error: expected: instr == NULL || reg != R18
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11029, thread=11015, isolate_group=main(0x13f80b000), isolate=main(0x13f817600)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=100469d20, vm_instructions=100469d20
fp=170255ed0, sp=170255ea8, pc=100805410
  pc 0x0000000100805410 fp 0x0000000170255ed0 dart::Profiler::DumpStackTrace(void*)+0x68
  pc 0x0000000100469ee8 fp 0x0000000170255ef0 dart::Assert::Fail(char const*, ...) const+0x28
  pc 0x000000010089ea7c fp 0x0000000170255fd0 dart::Simulator::set_register(dart::Instr*, dart::Register, long long, dart::R31Type)+0x128
  pc 0x00000001008a195c fp 0x00000001702560e0 dart::Simulator::DecodeLoadStoreRegPair(dart::Instr*)+0x20c
  pc 0x000000010089e2e4 fp 0x00000001702561c0 dart::Simulator::InstructionDecode(dart::Instr*)+0x1e8
  pc 0x00000001008a5c58 fp 0x00000001702562c0 dart::Simulator::Execute()+0x80
  pc 0x00000001008a5fa4 fp 0x00000001702563b0 dart::Simulator::Call(long long, long long, long long, long long, long long, bool, bool)+0x254
  pc 0x0000000100651768 fp 0x0000000170256450 dart::DartEntry::InvokeCode(dart::Code const&, unsigned long, dart::Array const&, dart::Array const&, dart::Thread*)+0x108
  pc 0x0000000100651504 fp 0x00000001702564c0 dart::DartEntry::InvokeFunction(dart::Function const&, dart::Array const&, dart::Array const&, unsigned long)+0x13c
  pc 0x00000001006544e4 fp 0x0000000170256530 dart::DartLibraryCalls::HandleMessage(long long, dart::Instance const&)+0x10c
  pc 0x000000010068ae54 fp 0x0000000170256cf0 dart::IsolateMessageHandler::HandleMessage(std::__2::unique_ptr<dart::Message, std::__2::default_delete<dart::Message>>)+0x33c
  pc 0x00000001006c7ef4 fp 0x0000000170256db0 dart::MessageHandler::HandleMessages(dart::MonitorLocker*, bool, bool)+0x1ec
  pc 0x00000001006c8b9c fp 0x0000000170256e40 dart::MessageHandler::TaskCallback()+0x2dc
  pc 0x00000001008c872c fp 0x0000000170256ef0 dart::ThreadPool::WorkerLoop(dart::ThreadPool::Worker*)+0x17c
  pc 0x00000001008c8fec fp 0x0000000170256f50 dart::ThreadPool::Worker::Main(unsigned long)+0x124
  pc 0x00000001007fe598 fp 0x0000000170256fc0 dart::OSThread::GetMaxStackSize()+0xd4
  pc 0x000000019fffbfa8 fp 0x0000000170256fe0 _pthread_start+0x94
-- End of DumpStackTrace
  pc 0x0000000000000000 fp 0x0000000120107a78 sp 0x0000000000000000 Cannot find code object
  pc 0x0000000105c41448 fp 0x0000000120107af8 sp 0x0000000120107a88 [Optimized] FfiTrampoline__setExternalSize$Method$FfiNative$Ptr
  pc 0x0000000105c409d8 fp 0x0000000120107b48 sp 0x0000000120107b08 [Unoptimized] FinalizerEntry.setExternalSize
  pc 0x0000000105c3e300 fp 0x0000000120107bf0 sp 0x0000000120107b58 [Unoptimized] _NativeFinalizer@8050071.attach
  pc 0x0000000105c46dc0 fp 0x0000000120107c48 sp 0x0000000120107c00 [Optimized] new Resource.
  pc 0x0000000105c3a360 fp 0x0000000120107c80 sp 0x0000000120107c58 [Unoptimized] main.step.<anonymous closure>
  pc 0x0000000105c1ff98 fp 0x0000000120107ce0 sp 0x0000000120107c90 [Unoptimized] new _GrowableList@0150898.generate
  pc 0x0000000105c399c4 fp 0x0000000120107d20 sp 0x0000000120107cf0 [Unoptimized] main.step
  pc 0x0000000105c397cc fp 0x0000000120107d58 sp 0x0000000120107d30 [Unoptimized] Timer._createTimer@4048458.<anonymous closure>
  pc 0x0000000105c38a28 fp 0x0000000120107df0 sp 0x0000000120107d68 [Unoptimized] _Timer@1026248._runTimers@1026248
  pc 0x0000000105c36b64 fp 0x0000000120107e28 sp 0x0000000120107e00 [Unoptimized] _Timer@1026248._handleMessage@1026248
  pc 0x0000000105c36994 fp 0x0000000120107e58 sp 0x0000000120107e38 [Unoptimized] _Timer@1026248._handleMessage@1026248
  pc 0x0000000105c30938 fp 0x0000000120107ec0 sp 0x0000000120107e68 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x0000000105c2f1f0 fp 0x0000000120107f18 sp 0x0000000120107ed0 [Unoptimized] _RawReceivePort@1026248._handleMessage@1026248
  pc 0x000000010328393c fp 0x0000000120107ff0 sp 0x0000000120107f28 [Stub] InvokeDartCode

Failed: tests/ffi/finalizer_external_size_accounting_test.dart
Running tests/ffi/function_callbacks_many_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x148e15c90
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11032, thread=11015, isolate_group=main(0x149828a00), isolate=main(0x14982f000)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104b39d20, vm_instructions=104b39d20
fp=14011fab0, sp=14011fa80, pc=148e15c90
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000148e15c90 fp 0x000000014011fab0 Unknown symbol

Failed: tests/ffi/function_callbacks_many_test.dart
Running tests/ffi/function_callbacks_structs_by_value_generated_test.dart
==== Running PassStruct1ByteIntx10
Calling TestPassStruct1ByteIntx10(((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10)))


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x15a709850
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11037, thread=10759, isolate_group=main(0x14c00a400), isolate=main(0x14c010a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=1020edd20, vm_instructions=1020edd20
fp=14017f988, sp=14017f950, pc=15a709850
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000015a709850 fp 0x000000014017f988 Unknown symbol

Failed: tests/ffi/function_callbacks_structs_by_value_generated_test.dart
Running tests/ffi/function_callbacks_structs_by_value_test.dart
callbackPassStructRecursive(10, (1, 2, 3, 4, 5))
PassStruct20BytesHomogeneousInt32x10(9, (2, 2, 3, 4, 5), 0x106f90000)


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x159e14dc0
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11046, thread=10759, isolate_group=main(0x14c00a400), isolate=main(0x14c010a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104245d20, vm_instructions=104245d20
fp=1301078c8, sp=130107890, pc=159e14dc0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000159e14dc0 fp 0x00000001301078c8 Unknown symbol

Failed: tests/ffi/function_callbacks_structs_by_value_test.dart
Running tests/ffi/function_callbacks_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x11ce140e0
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11054, thread=16135, isolate_group=main(0x11d01da00), isolate=main(0x11d034200)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=1047c1d20, vm_instructions=1047c1d20
fp=120127a60, sp=120127a30, pc=11ce140e0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000011ce140e0 fp 0x0000000120127a60 Unknown symbol

Failed: tests/ffi/function_callbacks_test.dart
Running tests/ffi/function_callbacks_varargs_generated_test.dart
==== Running VariadicAt1Int64x2
Calling TestVariadicAt1Int64x2((-1, 2))


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x14a707ac0
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11057, thread=10759, isolate_group=main(0x14b017800), isolate=main(0x14b020000)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=10210dd20, vm_instructions=10210dd20
fp=130107a58, sp=130107a20, pc=14a707ac0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000014a707ac0 fp 0x0000000130107a58 Unknown symbol

Failed: tests/ffi/function_callbacks_varargs_generated_test.dart
Running tests/ffi/function_callbacks_very_many_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x13b808e30
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11062, thread=10759, isolate_group=main(0x13c025600), isolate=main(0x13c010800)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=102ab9d20, vm_instructions=102ab9d20
fp=140127838, sp=140127800, pc=13b808e30
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000013b808e30 fp 0x0000000140127838 Unknown symbol

Failed: tests/ffi/function_callbacks_very_many_test.dart
Running tests/ffi/function_structs_by_value_generated_args_leaf_test.dart
Passed: tests/ffi/function_structs_by_value_generated_args_leaf_test.dart
Running tests/ffi/function_structs_by_value_generated_args_native_leaf_test.dart
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465

../../runtime/vm/simulator_arm64.cc: 955: error: expected: instr == NULL || reg != R18
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11080, thread=11271, isolate_group=main(0x13a815a00), isolate=main(0x13a830a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=100e45d20, vm_instructions=100e45d20
fp=16f879ed0, sp=16f879ea8, pc=1011e1410
  pc 0x00000001011e1410 fp 0x000000016f879ed0 dart::Profiler::DumpStackTrace(void*)+0x68
  pc 0x0000000100e45ee8 fp 0x000000016f879ef0 dart::Assert::Fail(char const*, ...) const+0x28
  pc 0x000000010127aa7c fp 0x000000016f879fd0 dart::Simulator::set_register(dart::Instr*, dart::Register, long long, dart::R31Type)+0x128
  pc 0x000000010127d95c fp 0x000000016f87a0e0 dart::Simulator::DecodeLoadStoreRegPair(dart::Instr*)+0x20c
  pc 0x000000010127a2e4 fp 0x000000016f87a1c0 dart::Simulator::InstructionDecode(dart::Instr*)+0x1e8
  pc 0x0000000101281c58 fp 0x000000016f87a2c0 dart::Simulator::Execute()+0x80
  pc 0x0000000101281fa4 fp 0x000000016f87a3b0 dart::Simulator::Call(long long, long long, long long, long long, long long, bool, bool)+0x254
  pc 0x000000010102d768 fp 0x000000016f87a450 dart::DartEntry::InvokeCode(dart::Code const&, unsigned long, dart::Array const&, dart::Array const&, dart::Thread*)+0x108
  pc 0x000000010102d504 fp 0x000000016f87a4c0 dart::DartEntry::InvokeFunction(dart::Function const&, dart::Array const&, dart::Array const&, unsigned long)+0x13c
  pc 0x00000001010304e4 fp 0x000000016f87a530 dart::DartLibraryCalls::HandleMessage(long long, dart::Instance const&)+0x10c
  pc 0x0000000101066e54 fp 0x000000016f87acf0 dart::IsolateMessageHandler::HandleMessage(std::__2::unique_ptr<dart::Message, std::__2::default_delete<dart::Message>>)+0x33c
  pc 0x00000001010a3ef4 fp 0x000000016f87adb0 dart::MessageHandler::HandleMessages(dart::MonitorLocker*, bool, bool)+0x1ec
  pc 0x00000001010a4b9c fp 0x000000016f87ae40 dart::MessageHandler::TaskCallback()+0x2dc
  pc 0x00000001012a472c fp 0x000000016f87aef0 dart::ThreadPool::WorkerLoop(dart::ThreadPool::Worker*)+0x17c
  pc 0x00000001012a4fec fp 0x000000016f87af50 dart::ThreadPool::Worker::Main(unsigned long)+0x124
  pc 0x00000001011da598 fp 0x000000016f87afc0 dart::OSThread::GetMaxStackSize()+0xd4
  pc 0x000000019fffbfa8 fp 0x000000016f87afe0 _pthread_start+0x94
-- End of DumpStackTrace
  pc 0x0000000000000000 fp 0x000000013014fc08 sp 0x0000000000000000 Cannot find code object
  pc 0x000000010663bc14 fp 0x000000013014fc38 sp 0x000000013014fc18 [Optimized] FfiTrampoline_posixFree
  pc 0x000000010663b8a4 fp 0x000000013014fc80 sp 0x000000013014fc48 [Unoptimized] _CallocAllocator@23435018.free
  pc 0x000000010663cb44 fp 0x000000013014fd60 sp 0x000000013014fc90 [Unoptimized] testPassStruct3BytesHomogeneousUint8x10NativeLeaf
  pc 0x0000000106632a68 fp 0x000000013014fd90 sp 0x000000013014fd70 [Unoptimized] main
  pc 0x00000001066328ac fp 0x000000013014fdb8 sp 0x000000013014fda0 [Unoptimized] main
  pc 0x0000000106632750 fp 0x000000013014fe18 sp 0x000000013014fdc8 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x0000000106630d40 fp 0x000000013014fe58 sp 0x000000013014fe28 [Unoptimized] _delayEntrypointInvocation@1026248.<anonymous closure>
  pc 0x0000000106630938 fp 0x000000013014fec0 sp 0x000000013014fe68 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x000000010662f1f0 fp 0x000000013014ff18 sp 0x000000013014fed0 [Unoptimized] _RawReceivePort@1026248._handleMessage@1026248
  pc 0x0000000103c8393c fp 0x000000013014fff0 sp 0x000000013014ff28 [Stub] InvokeDartCode

Failed: tests/ffi/function_structs_by_value_generated_args_native_leaf_test.dart
Running tests/ffi/function_structs_by_value_generated_args_native_test.dart
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15

../../runtime/vm/simulator_arm64.cc: 955: error: expected: instr == NULL || reg != R18
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11088, thread=10759, isolate_group=main(0x13682bc00), isolate=main(0x136832200)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=10261dd20, vm_instructions=10261dd20
fp=16dbe5ed0, sp=16dbe5ea8, pc=1029b9410
  pc 0x00000001029b9410 fp 0x000000016dbe5ed0 dart::Profiler::DumpStackTrace(void*)+0x68
  pc 0x000000010261dee8 fp 0x000000016dbe5ef0 dart::Assert::Fail(char const*, ...) const+0x28
  pc 0x0000000102a52a7c fp 0x000000016dbe5fd0 dart::Simulator::set_register(dart::Instr*, dart::Register, long long, dart::R31Type)+0x128
  pc 0x0000000102a5595c fp 0x000000016dbe60e0 dart::Simulator::DecodeLoadStoreRegPair(dart::Instr*)+0x20c
  pc 0x0000000102a522e4 fp 0x000000016dbe61c0 dart::Simulator::InstructionDecode(dart::Instr*)+0x1e8
  pc 0x0000000102a59c58 fp 0x000000016dbe62c0 dart::Simulator::Execute()+0x80
  pc 0x0000000102a59fa4 fp 0x000000016dbe63b0 dart::Simulator::Call(long long, long long, long long, long long, long long, bool, bool)+0x254
  pc 0x0000000102805768 fp 0x000000016dbe6450 dart::DartEntry::InvokeCode(dart::Code const&, unsigned long, dart::Array const&, dart::Array const&, dart::Thread*)+0x108
  pc 0x0000000102805504 fp 0x000000016dbe64c0 dart::DartEntry::InvokeFunction(dart::Function const&, dart::Array const&, dart::Array const&, unsigned long)+0x13c
  pc 0x00000001028084e4 fp 0x000000016dbe6530 dart::DartLibraryCalls::HandleMessage(long long, dart::Instance const&)+0x10c
  pc 0x000000010283ee54 fp 0x000000016dbe6cf0 dart::IsolateMessageHandler::HandleMessage(std::__2::unique_ptr<dart::Message, std::__2::default_delete<dart::Message>>)+0x33c
  pc 0x000000010287bef4 fp 0x000000016dbe6db0 dart::MessageHandler::HandleMessages(dart::MonitorLocker*, bool, bool)+0x1ec
  pc 0x000000010287cb9c fp 0x000000016dbe6e40 dart::MessageHandler::TaskCallback()+0x2dc
  pc 0x0000000102a7c72c fp 0x000000016dbe6ef0 dart::ThreadPool::WorkerLoop(dart::ThreadPool::Worker*)+0x17c
  pc 0x0000000102a7cfec fp 0x000000016dbe6f50 dart::ThreadPool::Worker::Main(unsigned long)+0x124
  pc 0x00000001029b2598 fp 0x000000016dbe6fc0 dart::OSThread::GetMaxStackSize()+0xd4
  pc 0x000000019fffbfa8 fp 0x000000016dbe6fe0 _pthread_start+0x94
-- End of DumpStackTrace
  pc 0x0000000000000000 fp 0x000000013812fbb0 sp 0x0000000000000000 Cannot find code object
  pc 0x0000000107e381bc fp 0x000000013812fbe8 sp 0x000000013812fbc0 [Optimized] FfiTrampoline_posixCalloc
  pc 0x0000000107e3749c fp 0x000000013812fc78 sp 0x000000013812fbf8 [Unoptimized] _CallocAllocator@23435018.allocate
  pc 0x0000000107e4796c fp 0x000000013812fd60 sp 0x000000013812fc88 [Unoptimized] testPassStruct8BytesIntx10Native
  pc 0x0000000107e32ab8 fp 0x000000013812fd90 sp 0x000000013812fd70 [Unoptimized] main
  pc 0x0000000107e328ac fp 0x000000013812fdb8 sp 0x000000013812fda0 [Unoptimized] main
  pc 0x0000000107e32750 fp 0x000000013812fe18 sp 0x000000013812fdc8 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x0000000107e30d40 fp 0x000000013812fe58 sp 0x000000013812fe28 [Unoptimized] _delayEntrypointInvocation@1026248.<anonymous closure>
  pc 0x0000000107e30938 fp 0x000000013812fec0 sp 0x000000013812fe68 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x0000000107e2f1f0 fp 0x000000013812ff18 sp 0x000000013812fed0 [Unoptimized] _RawReceivePort@1026248._handleMessage@1026248
  pc 0x000000010540393c fp 0x000000013812fff0 sp 0x000000013812ff28 [Stub] InvokeDartCode

Failed: tests/ffi/function_structs_by_value_generated_args_native_test.dart
Running tests/ffi/function_structs_by_value_generated_args_test.dart
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20
result = 20.0
PassUnion16BytesNestedFloatx10(((-1, 2), (-1, 2, 0), (-1, 2, 0, 0)), ((-3, 4), (-3, 4, 0), (-3, 4, 0, 0)), ((-5, 6), (-5, 6, 0), (-5, 6, 0, 0)), ((-7, 8), (-7, 8, 0), (-7, 8, 0, 0)), ((-9, 10), (-9, 10, 0), (-9, 10, 0, 0)), ((-11, 12), (-11, 12, 0), (-11, 12, 0, 0)), ((-13, 14), (-13, 14, 0), (-13, 14, 0, 0)), ((-15, 16), (-15, 16, 0), (-15, 16, 0, 0)), ((-17, 18), (-17, 18, 0), (-17, 18, 0, 0)), ((-19, 20), (-19, 20, 0), (-19, 20, 0, 0)))
result = 10
result = 10.0
PassUint8Boolx9Struct10BytesHomogeneousBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (1, 0, 1, 0, 1, 0, 1, 0, 1, 0), 1)
result = 11
result = 11
PassUint8Boolx9Struct10BytesInlineArrayBoolBool(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, ([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]), 1)
result = 11
result = 11
PassUint8Struct1ByteBool(1, (0))
result = 1
result = true
PassWCharStructInlineArrayIntUintPtrx2LongUnsigned(1, ([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 12, 13, 14, 15)
result = 120
result = 120
PassStruct1ByteIntx10((-1), (2), (-3), (4), (-5), (6), (-7), (8), (-9), (10))
result = 5
result = 5
PassStruct3BytesHomogeneousUint8x10((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30))
result = 465
result = 465
PassStruct3BytesInt2ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct4BytesHomogeneousInt16x10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct7BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14), (15, 16, 17, 18, 19, 20, 21), (22, 23, 24, 25, 26, 27, 28), (29, 30, 31, 32, 33, 34, 35), (36, 37, 38, 39, 40, 41, 42), (43, 44, 45, 46, 47, 48, 49), (50, 51, 52, 53, 54, 55, 56), (57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70))
result = 2485
result = 2485
PassStruct7BytesInt4ByteAlignedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct8BytesHomogeneousFloatx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct8BytesMixedx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15.0
PassStruct9BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18), (19, 20, 21, 22, 23, 24, 25, 26, 27), (28, 29, 30, 31, 32, 33, 34, 35, 36), (37, 38, 39, 40, 41, 42, 43, 44, 45), (46, 47, 48, 49, 50, 51, 52, 53, 54), (55, 56, 57, 58, 59, 60, 61, 62, 63), (64, 65, 66, 67, 68, 69, 70, 71, 72), (73, 74, 75, 76, 77, 78, 79, 80, 81), (82, 83, 84, 85, 86, 87, 88, 89, 90))
result = 4095
result = 4095
PassStruct9BytesInt4Or8ByteAlignedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct12BytesHomogeneousFloatx6((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18))
result = 9
result = 9.0
PassStruct16BytesHomogeneousFloatx5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct16BytesMixedx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10.0
PassStruct16BytesMixed2x10((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20), (-21, 22, -23, 24), (-25, 26, -27, 28), (-29, 30, -31, 32), (-33, 34, -35, 36), (-37, 38, -39, 40))
result = 20
result = 20.0
PassStruct17BytesIntx10((-1, 2, -3), (4, -5, 6), (-7, 8, -9), (10, -11, 12), (-13, 14, -15), (16, -17, 18), (-19, 20, -21), (22, -23, 24), (-25, 26, -27), (28, -29, 30))
result = 15
result = 15
PassStruct19BytesHomogeneousUint8x10((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), (39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), (58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76), (77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95), (96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114), (115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133), (134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152), (153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171), (172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190))
result = 18145
result = 18145
PassStruct20BytesHomogeneousInt32x10((-1, 2, -3, 4, -5), (6, -7, 8, -9, 10), (-11, 12, -13, 14, -15), (16, -17, 18, -19, 20), (-21, 22, -23, 24, -25), (26, -27, 28, -29, 30), (-31, 32, -33, 34, -35), (36, -37, 38, -39, 40), (-41, 42, -43, 44, -45), (46, -47, 48, -49, 50))
result = 25
result = 25
PassStruct20BytesHomogeneousFloat((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct32BytesHomogeneousDoublex5((-1, 2, -3, 4), (-5, 6, -7, 8), (-9, 10, -11, 12), (-13, 14, -15, 16), (-17, 18, -19, 20))
result = 10
result = 10.0
PassStruct40BytesHomogeneousDouble((-1, 2, -3, 4, -5))
result = -3
result = -3.0
PassStruct1024BytesHomogeneousUint64((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128))
result = 8256
result = 8256
PassFloatStruct16BytesHomogeneousFloatFloatStruct1(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassFloatStruct32BytesHomogeneousDoubleFloatStruct(-1, (2, -3, 4, -5), 6, (-7, 8, -9, 10), -11, (12, -13, 14, -15), 16, (-17, 18, -19, 20), -21)
result = -11
result = -11.0
PassInt8Struct16BytesMixedInt8Struct16BytesMixedIn(-1, (2, -3), 4, (-5, 6), -7, (8, -9), 10, (-11, 12), -13)
result = -7
result = -7.0
PassDoublex6Struct16BytesMixedx4Int32(-1, 2, -3, 4, -5, 6, (-7, 8), (-9, 10), (-11, 12), (-13, 14), -15)
result = -8
result = -8.0
PassInt32x4Struct16BytesMixedx4Double(-1, 2, -3, 4, (-5, 6), (-7, 8), (-9, 10), (-11, 12), -13)
result = -7
result = -7.0
PassStruct40BytesHomogeneousDoubleStruct4BytesHomo((-1, 2, -3, 4, -5), (6, -7), (8, -9))
result = -5
result = -5.0
PassInt32x8Doublex8Int64Int8Struct1ByteIntInt64Int(-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, (-19), 20, -21, (22, -23), 24, -25, (26, -27, 28), -29, 30, (-31, 32), -33, 34, (-35, 36, -37), 38, -39, (40, -41, 42), -43, 44, (-45, 46, -47), 48, -49, (50, -51, 52))
result = 26
result = 26.0
PassStructAlignmentInt16((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt32((-1, 2, -3))
result = -2
result = -2
PassStructAlignmentInt64((-1, 2, -3))
result = -2
result = -2
PassStruct8BytesNestedIntx10(((-1, 2), (-3, 4)), ((-5, 6), (-7, 8)), ((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)), ((-17, 18), (-19, 20)), ((-21, 22), (-23, 24)), ((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)), ((-33, 34), (-35, 36)), ((-37, 38), (-39, 40)))
result = 20
result = 20
PassStruct8BytesNestedFloatx10(((-1), (2)), ((-3), (4)), ((-5), (6)), ((-7), (8)), ((-9), (10)), ((-11), (12)), ((-13), (14)), ((-15), (16)), ((-17), (18)), ((-19), (20)))
result = 10
result = 10.0
PassStruct8BytesNestedFloat2x10(((-1), 2), ((-3), 4), ((-5), 6), ((-7), 8), ((-9), 10), ((-11), 12), ((-13), 14), ((-15), 16), ((-17), 18), ((-19), 20))
result = 10
result = 10.0
PassStruct8BytesNestedMixedx10(((-1, 2), (-3)), ((4, -5), (6)), ((-7, 8), (-9)), ((10, -11), (12)), ((-13, 14), (-15)), ((16, -17), (18)), ((-19, 20), (-21)), ((22, -23), (24)), ((-25, 26), (-27)), ((28, -29), (30)))
result = 15
result = 15.0
PassStruct16BytesNestedIntx2((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16))))
result = 8
result = 8
PassStruct32BytesNestedIntx2(((((-1, 2), (-3, 4)), ((-5, 6), (-7, 8))), (((-9, 10), (-11, 12)), ((-13, 14), (-15, 16)))), ((((-17, 18), (-19, 20)), ((-21, 22), (-23, 24))), (((-25, 26), (-27, 28)), ((-29, 30), (-31, 32)))))
result = 16
result = 16
PassStructNestedIntStructAlignmentInt16(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt32(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIntStructAlignmentInt64(((-1, 2, -3), (4, -5, 6)))
result = 3
result = 3
PassStructNestedIrregularEvenBiggerx4((1, ((2, ((-3, 4), (-5)), 6, ((-7), 8), 9, ((10), (-11)), 12), ((-13, 14), (-15)), 16, -17), ((18, ((-19, 20), (-21)), 22, ((-23), 24), 25, ((26), (-27)), 28), ((-29, 30), (-31)), 32, -33), 34), (35, ((36, ((-37, 38), (-39)), 40, ((-41), 42), 43, ((44), (-45)), 46), ((-47, 48), (-49)), 50, -51), ((52, ((-53, 54), (-55)), 56, ((-57), 58), 59, ((60), (-61)), 62), ((-63, 64), (-65)), 66, -67), 68), (69, ((70, ((-71, 72), (-73)), 74, ((-75), 76), 77, ((78), (-79)), 80), ((-81, 82), (-83)), 84, -85), ((86, ((-87, 88), (-89)), 90, ((-91), 92), 93, ((94), (-95)), 96), ((-97, 98), (-99)), 100, -101), 102), (103, ((104, ((-105, 106), (-107)), 108, ((-109), 110), 111, ((112), (-113)), 114), ((-115, 116), (-117)), 118, -119), ((120, ((-121, 122), (-123)), 124, ((-125), 126), 127, ((128), (-129)), 130), ((-131, 132), (-133)), 134, -135), 136))
result = 1572
result = 1572.0
PassStruct8BytesInlineArrayIntx4(([1, 2, 3, 4, 5, 6, 7, 8]), ([9, 10, 11, 12, 13, 14, 15, 16]), ([17, 18, 19, 20, 21, 22, 23, 24]), ([25, 26, 27, 28, 29, 30, 31, 32]))
result = 528
result = 528
PassStructInlineArrayIrregularx4(([(-1, 2), (-3, 4)], 5), ([(6, -7), (8, -9)], 10), ([(-11, 12), (-13, 14)], 15), ([(16, -17), (18, -19)], 20))
result = 50
result = 50
PassStructInlineArray100Bytes(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))
result = 5050
result = 5050
PassStructStruct16BytesHomogeneousFloat2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct32BytesHomogeneousDouble2x5(((-1), [(2), (-3)], 4), ((-5), [(6), (-7)], 8), ((-9), [(10), (-11)], 12), ((-13), [(14), (-15)], 16), ((-17), [(18), (-19)], 20))
result = 10
result = 10.0
PassStructStruct16BytesMixed3x10(((-1), [(2, -3, 4)], [-5, 6]), ((-7), [(8, -9, 10)], [-11, 12]), ((-13), [(14, -15, 16)], [-17, 18]), ((-19), [(20, -21, 22)], [-23, 24]), ((-25), [(26, -27, 28)], [-29, 30]), ((-31), [(32, -33, 34)], [-35, 36]), ((-37), [(38, -39, 40)], [-41, 42]), ((-43), [(44, -45, 46)], [-47, 48]), ((-49), [(50, -51, 52)], [-53, 54]), ((-55), [(56, -57, 58)], [-59, 60]))
result = 30
result = 30.0
PassUint8Struct32BytesInlineArrayMultiDimensionalI(1, ([[[[[2, 3], [4, 5]], [[6, 7], [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]], [[[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[26, 27], [28, 29]], [[30, 31], [32, 33]]]]]), 34, ([[[35, 36], [37, 38]], [[39, 40], [41, 42]]]), 43, ([[[44, 45], [46, 47]], [[48, 49], [50, 51]]]), 52)
result = 1378
result = 1378
PassUint8Struct4BytesInlineArrayMultiDimensionalIn(1, ([[(2), (-3)], [(4), (-5)]]), 6)
result = 5
result = 5
PassStruct3BytesPackedIntx10((-1, 2), (-3, 4), (-5, 6), (-7, 8), (-9, 10), (-11, 12), (-13, 14), (-15, 16), (-17, 18), (-19, 20))
result = 10
result = 10
PassStruct8BytesPackedIntx10((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17, 18, 19, 20), (21, 22, 23, 24, 25), (26, 27, 28, 29, 30), (31, 32, 33, 34, 35), (36, 37, 38, 39, 40), (41, 42, 43, 44, 45), (46, 47, 48, 49, 50))
result = 1275
result = 1275
PassStruct9BytesPackedMixedx10DoubleInt32x2((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), -21, 22, -23)
result = 188
result = 188.0
PassStruct5BytesPackedMixed((-1, 2))
result = 1
result = 1.0
PassStructNestedAlignmentStruct5BytesPackedMixed((1, (2, 3)))
result = 6
result = 6.0
PassStruct6BytesInlineArrayInt(([(-1, 2), (-3, 4)]))
result = 2
result = 2.0
PassStruct15BytesInlineArrayMixed(([(-1, 2), (-3, 4), (-5, 6)]))
result = 3
result = 3.0
PassUnion4BytesMixedx10((1, 1.4013e-45), (2, 2.8026e-45), (3, 4.2039e-45), (4, 5.60519e-45), (5, 7.00649e-45), (6, 8.40779e-45), (7, 9.80909e-45), (8, 1.12104e-44), (9, 1.26117e-44), (10, 1.4013e-44))
result = 55
result = 55.0
PassUnion8BytesNestedFloatx10((-1, (0, -1.875)), (2, (0, 2)), (-3, (0, -2.125)), (4, (0, 2.25)), (-5, (0, -2.3125)), (6, (0, 2.375)), (-7, (0, -2.4375)), (8, (0, 2.5)), (-9, (0, -2.53125)), (10, (0, 2.5625)))
result = 5
result = 5.0
PassUnion9BytesNestedIntx10(((-1, 2, -3), (255, 255, 2, 0, 253, 255, 255, 255, 0)), ((4, -5, 6), (4, 0, 251, 255, 6, 0, 0, 0, 0)), ((-7, 8, -9), (249, 255, 8, 0, 247, 255, 255, 255, 0)), ((10, -11, 12), (10, 0, 245, 255, 12, 0, 0, 0, 0)), ((-13, 14, -15), (243, 255, 14, 0, 241, 255, 255, 255, 0)), ((16, -17, 18), (16, 0, 239, 255, 18, 0, 0, 0, 0)), ((-19, 20, -21), (237, 255, 20, 0, 235, 255, 255, 255, 0)), ((22, -23, 24), (22, 0, 233, 255, 24, 0, 0, 0, 0)), ((-25, 26, -27), (231, 255, 26, 0, 229, 255, 255, 255, 0)), ((28, -29, 30), (28, 0, 227, 255, 30, 0, 0, 0, 0)))
result = 15
result = 15.0
PassUnion16BytesNestedInlineArrayFloatx10(([-1, 2, -3, 4], (-1, 2, -3, 4)), ([-5, 6, -7, 8], (-5, 6, -7, 8)), ([-9, 10, -11, 12], (-9, 10, -11, 12)), ([-13, 14, -15, 16], (-13, 14, -15, 16)), ([-17, 18, -19, 20], (-17, 18, -19, 20)), ([-21, 22, -23, 24], (-21, 22, -23, 24)), ([-25, 26, -27, 28], (-25, 26, -27, 28)), ([-29, 30, -31, 32], (-29, 30, -31, 32)), ([-33, 34, -35, 36], (-33, 34, -35, 36)), ([-37, 38, -39, 40], (-37, 38, -39, 40)))
result = 20

../../runtime/vm/simulator_arm64.cc: 955: error: expected: instr == NULL || reg != R18
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11106, thread=11015, isolate_group=main(0x128020800), isolate=main(0x128029000)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=1048fdd20, vm_instructions=1048fdd20
fp=16bdc1ed0, sp=16bdc1ea8, pc=104c99410
  pc 0x0000000104c99410 fp 0x000000016bdc1ed0 dart::Profiler::DumpStackTrace(void*)+0x68
  pc 0x00000001048fdee8 fp 0x000000016bdc1ef0 dart::Assert::Fail(char const*, ...) const+0x28
  pc 0x0000000104d32a7c fp 0x000000016bdc1fd0 dart::Simulator::set_register(dart::Instr*, dart::Register, long long, dart::R31Type)+0x128
  pc 0x0000000104d3595c fp 0x000000016bdc20e0 dart::Simulator::DecodeLoadStoreRegPair(dart::Instr*)+0x20c
  pc 0x0000000104d322e4 fp 0x000000016bdc21c0 dart::Simulator::InstructionDecode(dart::Instr*)+0x1e8
  pc 0x0000000104d39c58 fp 0x000000016bdc22c0 dart::Simulator::Execute()+0x80
  pc 0x0000000104d39fa4 fp 0x000000016bdc23b0 dart::Simulator::Call(long long, long long, long long, long long, long long, bool, bool)+0x254
  pc 0x0000000104ae5768 fp 0x000000016bdc2450 dart::DartEntry::InvokeCode(dart::Code const&, unsigned long, dart::Array const&, dart::Array const&, dart::Thread*)+0x108
  pc 0x0000000104ae5504 fp 0x000000016bdc24c0 dart::DartEntry::InvokeFunction(dart::Function const&, dart::Array const&, dart::Array const&, unsigned long)+0x13c
  pc 0x0000000104ae84e4 fp 0x000000016bdc2530 dart::DartLibraryCalls::HandleMessage(long long, dart::Instance const&)+0x10c
  pc 0x0000000104b1ee54 fp 0x000000016bdc2cf0 dart::IsolateMessageHandler::HandleMessage(std::__2::unique_ptr<dart::Message, std::__2::default_delete<dart::Message>>)+0x33c
  pc 0x0000000104b5bef4 fp 0x000000016bdc2db0 dart::MessageHandler::HandleMessages(dart::MonitorLocker*, bool, bool)+0x1ec
  pc 0x0000000104b5cb9c fp 0x000000016bdc2e40 dart::MessageHandler::TaskCallback()+0x2dc
  pc 0x0000000104d5c72c fp 0x000000016bdc2ef0 dart::ThreadPool::WorkerLoop(dart::ThreadPool::Worker*)+0x17c
  pc 0x0000000104d5cfec fp 0x000000016bdc2f50 dart::ThreadPool::Worker::Main(unsigned long)+0x124
  pc 0x0000000104c92598 fp 0x000000016bdc2fc0 dart::OSThread::GetMaxStackSize()+0xd4
  pc 0x000000019fffbfa8 fp 0x000000016bdc2fe0 _pthread_start+0x94
-- End of DumpStackTrace
  pc 0x0000000000000000 fp 0x000000011014fb48 sp 0x0000000000000000 Cannot find code object
  pc 0x000000012e5ce298 fp 0x000000011014fc30 sp 0x000000011014fb58 [Optimized] FfiTrampoline_passUnion16BytesNestedInlineArrayFloatx10
  pc 0x000000012e5cd31c fp 0x000000011014fd60 sp 0x000000011014fc40 [Unoptimized] testPassUnion16BytesNestedInlineArrayFloatx10
  pc 0x0000000118432dfc fp 0x000000011014fd90 sp 0x000000011014fd70 [Unoptimized] main
  pc 0x00000001184328ac fp 0x000000011014fdb8 sp 0x000000011014fda0 [Unoptimized] main
  pc 0x0000000118432750 fp 0x000000011014fe18 sp 0x000000011014fdc8 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x0000000118430d40 fp 0x000000011014fe58 sp 0x000000011014fe28 [Unoptimized] _delayEntrypointInvocation@1026248.<anonymous closure>
  pc 0x0000000118430938 fp 0x000000011014fec0 sp 0x000000011014fe68 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x000000011842f1f0 fp 0x000000011014ff18 sp 0x000000011014fed0 [Unoptimized] _RawReceivePort@1026248._handleMessage@1026248
  pc 0x000000010770393c fp 0x000000011014fff0 sp 0x000000011014ff28 [Stub] InvokeDartCode

Failed: tests/ffi/function_structs_by_value_generated_args_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_arg_leaf_test.dart
ReturnStructArgumentStruct1ByteInt((-1))
result = (-1)
result = (-1)
ReturnStructArgumentInt32x8Struct1ByteInt(-1, 2, -3, 4, -5, 6, -7, 8, (-9))
result = (-9)
result = (-9)
ReturnStructArgumentStruct8BytesHomogeneousFloat((-1, 2))
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStructArgumentStruct20BytesHomogeneousInt32((-1, 2, -3, 4, -5))


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x9
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11121, thread=15879, isolate_group=main(0x13682f400), isolate=main(0x136835a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=100435d20, vm_instructions=100435d20
fp=128107ca0, sp=128107c70, pc=114f821c0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000114f821c0 fp 0x0000000128107ca0 ReturnStructArgumentStruct20BytesHomogeneousInt32+0xd0

Failed: tests/ffi/function_structs_by_value_generated_ret_arg_leaf_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_arg_native_leaf_test.dart
ReturnStructArgumentStruct1ByteInt((-1))
result = (-1)
result = (-1)
ReturnStructArgumentInt32x8Struct1ByteInt(-1, 2, -3, 4, -5, 6, -7, 8, (-9))
result = (-9)
result = (-9)
ReturnStructArgumentStruct8BytesHomogeneousFloat((-1, 2))
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStructArgumentStruct20BytesHomogeneousInt32((-1, 2, -3, 4, -5))


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x9
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11134, thread=10759, isolate_group=main(0x131822c00), isolate=main(0x131829000)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=102d51d20, vm_instructions=102d51d20
fp=118107c70, sp=118107c40, pc=117a821c0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000117a821c0 fp 0x0000000118107c70 ReturnStructArgumentStruct20BytesHomogeneousInt32+0xd0

Failed: tests/ffi/function_structs_by_value_generated_ret_arg_native_leaf_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_arg_native_test.dart
ReturnStructArgumentStruct1ByteInt((-1))
result = (-1)
result = (-1)
ReturnStructArgumentInt32x8Struct1ByteInt(-1, 2, -3, 4, -5, 6, -7, 8, (-9))
result = (-9)
result = (-9)
ReturnStructArgumentStruct8BytesHomogeneousFloat((-1, 2))
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStructArgumentStruct20BytesHomogeneousInt32((-1, 2, -3, 4, -5))


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x9
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11139, thread=11015, isolate_group=main(0x125033800), isolate=main(0x12503c600)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=1046d9d20, vm_instructions=1046d9d20
fp=128127c40, sp=128127c10, pc=122c021c0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000122c021c0 fp 0x0000000128127c40 ReturnStructArgumentStruct20BytesHomogeneousInt32+0xd0

Failed: tests/ffi/function_structs_by_value_generated_ret_arg_native_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_arg_test.dart
ReturnStructArgumentStruct1ByteInt((-1))
result = (-1)
result = (-1)
ReturnStructArgumentInt32x8Struct1ByteInt(-1, 2, -3, 4, -5, 6, -7, 8, (-9))
result = (-9)
result = (-9)
ReturnStructArgumentStruct8BytesHomogeneousFloat((-1, 2))
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStructArgumentStruct20BytesHomogeneousInt32((-1, 2, -3, 4, -5))


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x9
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11146, thread=10759, isolate_group=main(0x150842400), isolate=main(0x150848a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104855d20, vm_instructions=104855d20
fp=148127c70, sp=148127c40, pc=117a021c0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000117a021c0 fp 0x0000000148127c70 ReturnStructArgumentStruct20BytesHomogeneousInt32+0xd0

Failed: tests/ffi/function_structs_by_value_generated_ret_arg_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_leaf_test.dart
ReturnStruct1ByteInt(-1)
result = (-1)
result = (-1)
ReturnStruct3BytesHomogeneousUint8(1, 2, 3)
result = (1, 2, 3)
result = (1, 2, 3)
ReturnStruct3BytesInt2ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct4BytesHomogeneousInt16(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct7BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
ReturnStruct7BytesInt4ByteAligned(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesInt(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesHomogeneousFloat(-1, 2)
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStruct8BytesMixed(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2, -3)
ReturnStruct9BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
ReturnStruct9BytesInt4Or8ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct12BytesHomogeneousFloat(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2.0, -3.0)
ReturnStruct16BytesHomogeneousFloat(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4.0)
ReturnStruct16BytesMixed(-1, 2)
result = (-1, 2)
result = (-1.0, 2)
ReturnStruct16BytesMixed2(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4)
ReturnStruct17BytesInt(-1, 2, -3)


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x11
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11167, thread=10759, isolate_group=main(0x11a009e00), isolate=main(0x11a010600)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=102d0dd20, vm_instructions=102d0dd20
fp=110117c90, sp=110117c40, pc=153ffebbc
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000153ffebbc fp 0x0000000110117c90 ReturnStruct17BytesInt+0xbc

Failed: tests/ffi/function_structs_by_value_generated_ret_leaf_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_native_leaf_test.dart
ReturnStruct1ByteInt(-1)
result = (-1)
result = (-1)
ReturnStruct3BytesHomogeneousUint8(1, 2, 3)
result = (1, 2, 3)
result = (1, 2, 3)
ReturnStruct3BytesInt2ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct4BytesHomogeneousInt16(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct7BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
ReturnStruct7BytesInt4ByteAligned(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesInt(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesHomogeneousFloat(-1, 2)
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStruct8BytesMixed(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2, -3)
ReturnStruct9BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
ReturnStruct9BytesInt4Or8ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct12BytesHomogeneousFloat(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2.0, -3.0)
ReturnStruct16BytesHomogeneousFloat(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4.0)
ReturnStruct16BytesMixed(-1, 2)
result = (-1, 2)
result = (-1.0, 2)
ReturnStruct16BytesMixed2(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4)
ReturnStruct17BytesInt(-1, 2, -3)


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x11
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11172, thread=11015, isolate_group=main(0x14c009000), isolate=main(0x14c00ee00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=100459d20, vm_instructions=100459d20
fp=140117c50, sp=140117c00, pc=13d87ebbc
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000013d87ebbc fp 0x0000000140117c50 ReturnStruct17BytesInt+0xbc

Failed: tests/ffi/function_structs_by_value_generated_ret_native_leaf_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_native_test.dart
ReturnStruct1ByteInt(-1)
result = (-1)
result = (-1)
ReturnStruct3BytesHomogeneousUint8(1, 2, 3)
result = (1, 2, 3)
result = (1, 2, 3)
ReturnStruct3BytesInt2ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct4BytesHomogeneousInt16(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct7BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
ReturnStruct7BytesInt4ByteAligned(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesInt(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesHomogeneousFloat(-1, 2)
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStruct8BytesMixed(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2, -3)
ReturnStruct9BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
ReturnStruct9BytesInt4Or8ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct12BytesHomogeneousFloat(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2.0, -3.0)
ReturnStruct16BytesHomogeneousFloat(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4.0)
ReturnStruct16BytesMixed(-1, 2)
result = (-1, 2)
result = (-1.0, 2)
ReturnStruct16BytesMixed2(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4)
ReturnStruct17BytesInt(-1, 2, -3)


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x11
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11179, thread=11271, isolate_group=main(0x159812400), isolate=main(0x159836e00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=102409d20, vm_instructions=102409d20
fp=150127c20, sp=150127bd0, pc=115d7ebbc
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000115d7ebbc fp 0x0000000150127c20 ReturnStruct17BytesInt+0xbc

Failed: tests/ffi/function_structs_by_value_generated_ret_native_test.dart
Running tests/ffi/function_structs_by_value_generated_ret_test.dart
ReturnStruct1ByteInt(-1)
result = (-1)
result = (-1)
ReturnStruct3BytesHomogeneousUint8(1, 2, 3)
result = (1, 2, 3)
result = (1, 2, 3)
ReturnStruct3BytesInt2ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct4BytesHomogeneousInt16(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct7BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
result = (1, 2, 3, 4, 5, 6, 7)
ReturnStruct7BytesInt4ByteAligned(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesInt(-1, 2, -3)
result = (-1, 2, -3)
result = (-1, 2, -3)
ReturnStruct8BytesHomogeneousFloat(-1, 2)
result = (-1, 2)
result = (-1.0, 2.0)
ReturnStruct8BytesMixed(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2, -3)
ReturnStruct9BytesHomogeneousUint8(1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
result = (1, 2, 3, 4, 5, 6, 7, 8, 9)
ReturnStruct9BytesInt4Or8ByteAligned(-1, 2)
result = (-1, 2)
result = (-1, 2)
ReturnStruct12BytesHomogeneousFloat(-1, 2, -3)
result = (-1, 2, -3)
result = (-1.0, 2.0, -3.0)
ReturnStruct16BytesHomogeneousFloat(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4.0)
ReturnStruct16BytesMixed(-1, 2)
result = (-1, 2)
result = (-1.0, 2)
ReturnStruct16BytesMixed2(-1, 2, -3, 4)
result = (-1, 2, -3, 4)
result = (-1.0, 2.0, -3.0, 4)
ReturnStruct17BytesInt(-1, 2, -3)


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x11
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11184, thread=10759, isolate_group=main(0x10f009a00), isolate=main(0x10f010200)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=102705d20, vm_instructions=102705d20
fp=110127c60, sp=110127c10, pc=15c47ebbc
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000015c47ebbc fp 0x0000000110127c60 ReturnStruct17BytesInt+0xbc

Failed: tests/ffi/function_structs_by_value_generated_ret_test.dart
Running tests/ffi/function_structs_test.dart
Passed: tests/ffi/function_structs_test.dart
Running tests/ffi/function_test.dart
Passed: tests/ffi/function_test.dart
Running tests/ffi/function_varargs_generated_leaf_test.dart
Passed: tests/ffi/function_varargs_generated_leaf_test.dart
Running tests/ffi/function_varargs_generated_native_leaf_test.dart
Passed: tests/ffi/function_varargs_generated_native_leaf_test.dart
Running tests/ffi/function_varargs_generated_native_test.dart
Passed: tests/ffi/function_varargs_generated_native_test.dart
Running tests/ffi/function_varargs_generated_test.dart
Passed: tests/ffi/function_varargs_generated_test.dart
Running tests/ffi/function_varargs_name_test.dart
Passed: tests/ffi/function_varargs_name_test.dart
Running tests/ffi/function_varargs_test.dart
Passed: tests/ffi/function_varargs_test.dart
Running tests/ffi/function_very_many_test.dart
Passed: tests/ffi/function_very_many_test.dart
Running tests/ffi/hardfp_test.dart
SumFloatsAndDoubles(1, 2, 3)
returning 6


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x145707ac0
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11258, thread=10759, isolate_group=main(0x145812600), isolate=main(0x145838400)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104c2dd20, vm_instructions=104c2dd20
fp=138107ac0, sp=138107a90, pc=145707ac0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000145707ac0 fp 0x0000000138107ac0 Unknown symbol

Failed: tests/ffi/hardfp_test.dart
Running tests/ffi/has_symbol_test.dart
Passed: tests/ffi/has_symbol_test.dart
Running tests/ffi/inline_array_multi_dimensional_test.dart
Passed: tests/ffi/inline_array_multi_dimensional_test.dart
Running tests/ffi/inline_array_test.dart
Passed: tests/ffi/inline_array_test.dart
Running tests/ffi/native_effect_test.dart
Passed: tests/ffi/native_effect_test.dart
Running tests/ffi/negative_function_test.dart
Passed: tests/ffi/negative_function_test.dart
Running tests/ffi/regress_37254_test.dart
Passed: tests/ffi/regress_37254_test.dart
Running tests/ffi/regress_39044_test.dart
Passed: tests/ffi/regress_39044_test.dart
Running tests/ffi/regress_39063_test.dart
Passed: tests/ffi/regress_39063_test.dart
Running tests/ffi/regress_39885_test.dart
Passed: tests/ffi/regress_39885_test.dart
Running tests/ffi/regress_40537_test.dart
Passed: tests/ffi/regress_40537_test.dart
Running tests/ffi/regress_43016_test.dart
Passed: tests/ffi/regress_43016_test.dart
Running tests/ffi/regress_43693_test.dart
Passed: tests/ffi/regress_43693_test.dart
Running tests/ffi/regress_44985_test.dart

../../tests/ffi/regress_44985_test.dart:10:20: Error: Field 's' cannot be nullable or have type 'Null', it must be `int`, `double`, `Pointer`, or a subtype of `Struct` or `Union`.
  external Struct? s; //# 01: compile-time error
                   ^

Failed: tests/ffi/regress_44985_test.dart
Running tests/ffi/regress_44986_test.dart

../../tests/ffi/regress_44986_test.dart:10:17: Error: Field 's' cannot be nullable or have type 'Null', it must be `int`, `double`, `Pointer`, or a subtype of `Struct` or `Union`.
  external Null s; //# 01: compile-time error
                ^

Failed: tests/ffi/regress_44986_test.dart
Running tests/ffi/regress_45189_test.dart
Passed: tests/ffi/regress_45189_test.dart
Running tests/ffi/regress_45198_test.dart
Passed: tests/ffi/regress_45198_test.dart
Running tests/ffi/regress_45507_test.dart
Passed: tests/ffi/regress_45507_test.dart
Running tests/ffi/regress_45988_test.dart
Passed: tests/ffi/regress_45988_test.dart
Running tests/ffi/regress_46004_test.dart
Passed: tests/ffi/regress_46004_test.dart
Running tests/ffi/regress_46085_test.dart

../../tests/ffi/regress_46085_test.dart:11:25: Error: Field 'a0' must have an 'Array' annotation that matches the dimensions.
  external Array<Int16> a0; //# 01: compile-time error
                        ^
../../tests/ffi/regress_46085_test.dart:14:32: Error: Field 'a1' must have an 'Array' annotation that matches the dimensions.
  external Array<Array<Int16>> a1; //# 02: compile-time error
                               ^

Failed: tests/ffi/regress_46085_test.dart
Running tests/ffi/regress_46127_test.dart
Passed: tests/ffi/regress_46127_test.dart
Running tests/ffi/regress_47594_test.dart
Passed: tests/ffi/regress_47594_test.dart
Running tests/ffi/regress_47673_2_test.dart

../../tests/ffi/regress_47673_2_test.dart:15:18: Error: Type 'Unknown' not found.
  external Array<Unknown> b; //# 1: compile-time error
                 ^^^^^^^
../../tests/ffi/regress_47673_2_test.dart:15:18: Error: 'Unknown' isn't a type.
  external Array<Unknown> b; //# 1: compile-time error
                 ^^^^^^^
../../tests/ffi/regress_47673_2_test.dart:15:27: Error: Expected type 'Array<invalid-type>' to be a valid and instantiated subtype of 'NativeType'.
 - 'Array' is from 'dart:ffi'.
  external Array<Unknown> b; //# 1: compile-time error
                          ^

Failed: tests/ffi/regress_47673_2_test.dart
Running tests/ffi/regress_47673_test.dart
Passed: tests/ffi/regress_47673_test.dart
Running tests/ffi/regress_49402_test.dart
Passed: tests/ffi/regress_49402_test.dart
Running tests/ffi/regress_49684_test.dart
Passed: tests/ffi/regress_49684_test.dart
Running tests/ffi/regress_51041_test.dart

../../tests/ffi/regress_51041_test.dart:13:7: Error: Field 'x' cannot be nullable or have type 'Null', it must be `int`, `double`, `Pointer`, or a subtype of `Struct` or `Union`.
      x;
      ^

Failed: tests/ffi/regress_51041_test.dart
Running tests/ffi/regress_51315_test.dart
Passed: tests/ffi/regress_51315_test.dart
Running tests/ffi/regress_51321_test.dart
Passed: tests/ffi/regress_51321_test.dart
Running tests/ffi/regress_51504_test.dart
Passed: tests/ffi/regress_51504_test.dart
Running tests/ffi/regress_51538_2_test.dart
Passed: tests/ffi/regress_51538_2_test.dart
Running tests/ffi/regress_51538_3_test.dart
Passed: tests/ffi/regress_51538_3_test.dart
Running tests/ffi/regress_51538_test.dart
Passed: tests/ffi/regress_51538_test.dart
Running tests/ffi/regress_51913_test.dart

../../tests/ffi/regress_51913_test.dart:8:2: Error: Expected type 'NativeFunction<dynamic>' to be a valid and instantiated subtype of 'NativeType'.
 - 'NativeFunction' is from 'dart:ffi'.
@Native() //# 1: compile-time error
 ^

Failed: tests/ffi/regress_51913_test.dart
Running tests/ffi/regress_b_261224444_test.dart
Passed: tests/ffi/regress_b_261224444_test.dart
Running tests/ffi/regress_flutter79441_test.dart
Passed: tests/ffi/regress_flutter79441_test.dart
Running tests/ffi/regress_flutter97301_test.dart
Passed: tests/ffi/regress_flutter97301_test.dart
Running tests/ffi/regress_jump_to_frame_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x12ff07bb0
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11629, thread=16135, isolate_group=main(0x130012600), isolate=main(0x130037a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=10464dd20, vm_instructions=10464dd20
fp=120127ad0, sp=120127aa0, pc=12ff07bb0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000012ff07bb0 fp 0x0000000120127ad0 Unknown symbol

Failed: tests/ffi/regress_jump_to_frame_test.dart
Running tests/ffi/sizeof_test.dart
Passed: tests/ffi/sizeof_test.dart
Running tests/ffi/snapshot_test.dart
Passed: tests/ffi/snapshot_test.dart
Running tests/ffi/stacktrace_regress_37910_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x136709840
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11642, thread=10759, isolate_group=main(0x13682bc00), isolate=main(0x136832200)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=102fedd20, vm_instructions=102fedd20
fp=138127ba0, sp=138127b70, pc=136709840
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000136709840 fp 0x0000000138127ba0 Unknown symbol

Failed: tests/ffi/stacktrace_regress_37910_test.dart
Running tests/ffi/structs_nested_test.dart
Passed: tests/ffi/structs_nested_test.dart
Running tests/ffi/structs_nnbd_workaround_test.dart
Passed: tests/ffi/structs_nnbd_workaround_test.dart
Running tests/ffi/structs_packed_test.dart
Passed: tests/ffi/structs_packed_test.dart
Running tests/ffi/structs_test.dart
Passed: tests/ffi/structs_test.dart
Running tests/ffi/unaligned_test.dart
Passed: tests/ffi/unaligned_test.dart
Running tests/ffi/variance_function_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x158e14830
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11705, thread=10759, isolate_group=main(0x149009a00), isolate=main(0x149019400)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104691d20, vm_instructions=104691d20
fp=140107af0, sp=140107ac0, pc=158e14830
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000158e14830 fp 0x0000000140107af0 Unknown symbol

Failed: tests/ffi/variance_function_test.dart
Running tests/ffi/vmspecific_dynamic_library_test.dart
Passed: tests/ffi/vmspecific_dynamic_library_test.dart
Running tests/ffi/vmspecific_enable_ffi_test.dart
Passed: tests/ffi/vmspecific_enable_ffi_test.dart
Running tests/ffi/vmspecific_ffi_native_test.dart
Passed: tests/ffi/vmspecific_ffi_native_test.dart
Running tests/ffi/vmspecific_function_callbacks_exit_test.dart
Passed: tests/ffi/vmspecific_function_callbacks_exit_test.dart
Running tests/ffi/vmspecific_function_callbacks_negative_test.dart

../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:15:43: Error: Undefined name 'returnVoid'.
  Pointer.fromFunction<Double Function()>(returnVoid, null); //# 59: compile-time error
                                          ^^^^^^^^^^
../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:16:41: Error: Undefined name 'returnVoid'.
  Pointer.fromFunction<Void Function()>(returnVoid, 0); //# 60: compile-time error
                                        ^^^^^^^^^^
../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:15:43: Error: fromFunction expects a static function as parameter. dart:ffi only supports calling static Dart functions from native code. Closures and tear-offs are not supported because they can capture context.
  Pointer.fromFunction<Double Function()>(returnVoid, null); //# 59: compile-time error
                                          ^
../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:16:41: Error: fromFunction expects a static function as parameter. dart:ffi only supports calling static Dart functions from native code. Closures and tear-offs are not supported because they can capture context.
  Pointer.fromFunction<Void Function()>(returnVoid, 0); //# 60: compile-time error
                                        ^
../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:17:66: Error: Expected 'String' to be a subtype of 'double'.
  Pointer.fromFunction<Double Function()>(testExceptionalReturn, "abc"); //# 61: compile-time error
                                                                 ^
../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:18:66: Error: Expected 'int' to be a subtype of 'double'.
  Pointer.fromFunction<Double Function()>(testExceptionalReturn, 0); //# 62: compile-time error
                                                                 ^
../../tests/ffi/vmspecific_function_callbacks_negative_test.dart:19:11: Error: Expected an exceptional return value for a native callback returning 'double'.
  Pointer.fromFunction<Double Function()>(testExceptionalReturn); //# 63: compile-time error
          ^

Failed: tests/ffi/vmspecific_function_callbacks_negative_test.dart
Running tests/ffi/vmspecific_function_callbacks_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x135807290
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11736, thread=10759, isolate_group=main(0x136817600), isolate=main(0x13681c400)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104835d20, vm_instructions=104835d20
fp=138127a80, sp=138127a50, pc=135807290
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000135807290 fp 0x0000000138127a80 Unknown symbol

Failed: tests/ffi/vmspecific_function_callbacks_test.dart
Running tests/ffi/vmspecific_function_gc_test.dart

../../runtime/vm/simulator_arm64.cc: 955: error: expected: instr == NULL || reg != R18
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11739, thread=10759, isolate_group=main(0x16080b600), isolate=main(0x160811000)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=1021f5d20, vm_instructions=1021f5d20
fp=16e00ded0, sp=16e00dea8, pc=102591410
  pc 0x0000000102591410 fp 0x000000016e00ded0 dart::Profiler::DumpStackTrace(void*)+0x68
  pc 0x00000001021f5ee8 fp 0x000000016e00def0 dart::Assert::Fail(char const*, ...) const+0x28
  pc 0x000000010262aa7c fp 0x000000016e00dfd0 dart::Simulator::set_register(dart::Instr*, dart::Register, long long, dart::R31Type)+0x128
  pc 0x000000010262d95c fp 0x000000016e00e0e0 dart::Simulator::DecodeLoadStoreRegPair(dart::Instr*)+0x20c
  pc 0x000000010262a2e4 fp 0x000000016e00e1c0 dart::Simulator::InstructionDecode(dart::Instr*)+0x1e8
  pc 0x0000000102631c58 fp 0x000000016e00e2c0 dart::Simulator::Execute()+0x80
  pc 0x0000000102631fa4 fp 0x000000016e00e3b0 dart::Simulator::Call(long long, long long, long long, long long, long long, bool, bool)+0x254
  pc 0x00000001023dd768 fp 0x000000016e00e450 dart::DartEntry::InvokeCode(dart::Code const&, unsigned long, dart::Array const&, dart::Array const&, dart::Thread*)+0x108
  pc 0x00000001023dd504 fp 0x000000016e00e4c0 dart::DartEntry::InvokeFunction(dart::Function const&, dart::Array const&, dart::Array const&, unsigned long)+0x13c
  pc 0x00000001023e04e4 fp 0x000000016e00e530 dart::DartLibraryCalls::HandleMessage(long long, dart::Instance const&)+0x10c
  pc 0x0000000102416e54 fp 0x000000016e00ecf0 dart::IsolateMessageHandler::HandleMessage(std::__2::unique_ptr<dart::Message, std::__2::default_delete<dart::Message>>)+0x33c
  pc 0x0000000102453ef4 fp 0x000000016e00edb0 dart::MessageHandler::HandleMessages(dart::MonitorLocker*, bool, bool)+0x1ec
  pc 0x0000000102454b9c fp 0x000000016e00ee40 dart::MessageHandler::TaskCallback()+0x2dc
  pc 0x000000010265472c fp 0x000000016e00eef0 dart::ThreadPool::WorkerLoop(dart::ThreadPool::Worker*)+0x17c
  pc 0x0000000102654fec fp 0x000000016e00ef50 dart::ThreadPool::Worker::Main(unsigned long)+0x124
  pc 0x000000010258a598 fp 0x000000016e00efc0 dart::OSThread::GetMaxStackSize()+0xd4
  pc 0x000000019fffbfa8 fp 0x000000016e00efe0 _pthread_start+0x94
-- End of DumpStackTrace
  pc 0x0000000000000000 fp 0x0000000148107ce0 sp 0x0000000000000000 Cannot find code object
  pc 0x000000010d9ba0e4 fp 0x0000000148107d10 sp 0x0000000148107cf0 [Optimized] FfiTrampoline_unprotectCode
  pc 0x000000010d9b97a0 fp 0x0000000148107d60 sp 0x0000000148107d20 [Unoptimized] testWriteProtection
  pc 0x000000010d9b2a08 fp 0x0000000148107d90 sp 0x0000000148107d70 [Unoptimized] main
  pc 0x000000010d9b28ac fp 0x0000000148107db8 sp 0x0000000148107da0 [Unoptimized] main
  pc 0x000000010d9b2750 fp 0x0000000148107e18 sp 0x0000000148107dc8 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x000000010d9b0d40 fp 0x0000000148107e58 sp 0x0000000148107e28 [Unoptimized] _delayEntrypointInvocation@1026248.<anonymous closure>
  pc 0x000000010d9b0938 fp 0x0000000148107ec0 sp 0x0000000148107e68 [Unoptimized] _Closure@0150898.dyn:call
  pc 0x000000010d9af1f0 fp 0x0000000148107f18 sp 0x0000000148107ed0 [Unoptimized] _RawReceivePort@1026248._handleMessage@1026248
  pc 0x000000010500393c fp 0x0000000148107ff0 sp 0x0000000148107f28 [Stub] InvokeDartCode

Failed: tests/ffi/vmspecific_function_gc_test.dart
Running tests/ffi/vmspecific_function_test.dart
Passed: tests/ffi/vmspecific_function_test.dart
Running tests/ffi/vmspecific_handle_dynamically_linked_test.dart
Passed: tests/ffi/vmspecific_handle_dynamically_linked_test.dart
Running tests/ffi/vmspecific_handle_test.dart
testHandle
passObjectToC(Instance of 'SomeClass')
result = Instance of 'SomeClass'
testHandleWithInteger
passObjectToC(1337)
result = 1337
HandleReadFieldValue


===== CRASH =====
si_signo=Segmentation fault: 11(11), si_code=2, si_addr=0x5f00000000000630
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11749, thread=10759, isolate_group=main(0x12682dc00), isolate=main(0x126834200)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=100d15d20, vm_instructions=100d15d20
fp=110107b30, sp=110107ae0, pc=100f295b0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x0000000100f295b0 fp 0x0000000110107b30 dart::HandleScope::~HandleScope()+0x34

Failed: tests/ffi/vmspecific_handle_test.dart
Running tests/ffi/vmspecific_highmem_32bit_test.dart
Passed: tests/ffi/vmspecific_highmem_32bit_test.dart
Running tests/ffi/vmspecific_leaf_call_test.dart
Passed: tests/ffi/vmspecific_leaf_call_test.dart
Running tests/ffi/vmspecific_native_finalizer_2_test.dart
Passed: tests/ffi/vmspecific_native_finalizer_2_test.dart
Running tests/ffi/vmspecific_native_finalizer_isolate_groups_test.dart
Passed: tests/ffi/vmspecific_native_finalizer_isolate_groups_test.dart
Running tests/ffi/vmspecific_native_finalizer_isolates_test.dart
Passed: tests/ffi/vmspecific_native_finalizer_isolates_test.dart
Running tests/ffi/vmspecific_native_finalizer_test.dart
Passed: tests/ffi/vmspecific_native_finalizer_test.dart
Running tests/ffi/vmspecific_object_gc_test.dart
Passed: tests/ffi/vmspecific_object_gc_test.dart
Running tests/ffi/vmspecific_regress_37100_test.dart
Passed: tests/ffi/vmspecific_regress_37100_test.dart
Running tests/ffi/vmspecific_regress_37511_callbacks_test.dart


===== CRASH =====
si_signo=Bus error: 10(10), si_code=1, si_addr=0x13f8071a0
version=3.0.5 (stable) (Fri Jun 23 13:43:02 2023 -0700) on "macos_simarm64"
pid=11803, thread=10759, isolate_group=main(0x140020200), isolate=main(0x140011a00)
os=macos, arch=arm64, comp=no, sim=yes
isolate_instructions=104acdd20, vm_instructions=104acdd20
fp=130127b10, sp=130127ae0, pc=13f8071a0
Stack dump aborted because GetAndValidateThreadStackBounds failed.
  pc 0x000000013f8071a0 fp 0x0000000130127b10 Unknown symbol

Failed: tests/ffi/vmspecific_regress_37511_callbacks_test.dart
Running tests/ffi/vmspecific_regress_37511_test.dart
Passed: tests/ffi/vmspecific_regress_37511_test.dart
Running tests/ffi/vmspecific_regress_37780_test.dart
Passed: tests/ffi/vmspecific_regress_37780_test.dart
Running tests/ffi/vmspecific_regress_38993_test.dart

../../tests/ffi/vmspecific_regress_38993_test.dart:10:11: Error: Field 'x' cannot be nullable or have type 'Null', it must be `int`, `double`, `Pointer`, or a subtype of `Struct` or `Union`.
  dynamic x; //# 1: compile-time error
          ^

Failed: tests/ffi/vmspecific_regress_38993_test.dart
Running tests/ffi/vmspecific_regress_51794_test.dart
Passed: tests/ffi/vmspecific_regress_51794_test.dart
Running tests/ffi/vmspecific_send_port_id_test.dart
Passed: tests/ffi/vmspecific_send_port_id_test.dart
Running tests/ffi/vmspecific_static_checks_ffinative_test.dart

../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:81:10: Error: Can't have modifier 'static' here.
Try removing 'static'.
external static int badOptParam(); //# 12: compile-time error
         ^^^^^^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:84:33: Error: Expected an identifier, but got '}'.
Try inserting an identifier before '}'.
@FfiNative<Void Function({Double})>('doesntmatter') //# 13: compile-time error
                                ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:85:10: Error: Can't have modifier 'static' here.
Try removing 'static'.
external static int badNamedParam(); //# 13: compile-time error
         ^^^^^^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:26:4: Error: Unexpected number of FfiNative annotation parameters. Expected 2 but has 1. FfiNative instance method annotation must have receiver as first argument.
  @FfiNative<Void Function(IntPtr)>('doesntmatter') //# 03: compile-time error
   ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:31:4: Error: Only classes extending NativeFieldWrapperClass1 can be passed as Pointer.
  @FfiNative<Void Function(Pointer<Void>, IntPtr)>(//# 04: compile-time error
   ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:38:4: Error: Unexpected number of FfiNative annotation parameters. Expected 2 but has 1. FfiNative instance method annotation must have receiver as first argument.
  @FfiNative<Void Function(IntPtr)>('doesntmatter') //# 05: compile-time error
   ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:43:17: Error: Expected type 'void Function(Pointer<Void>, int, int, Object)' to be 'Object Function(Pointer<Void>, int, int, Object)', which is the Dart type corresponding to 'NativeFunction<Handle Function(Pointer<Void>, Uint32, Uint32, Handle)>'.
 - 'Pointer' is from 'dart:ffi'.
 - 'Void' is from 'dart:ffi'.
 - 'Object' is from 'dart:core'.
 - 'NativeFunction' is from 'dart:ffi'.
 - 'Handle' is from 'dart:ffi'.
 - 'Uint32' is from 'dart:ffi'.
  external void toImageSync(int width, int height, Object outImage);  //# 49471: compile-time error
                ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:62:4: Error: Only classes extending NativeFieldWrapperClass1 can be passed as Pointer.
  @FfiNative<IntPtr Function(Pointer<Void>, Handle)>(//# 09: compile-time error
   ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:68:4: Error: Only classes extending NativeFieldWrapperClass1 can be passed as Pointer.
  @FfiNative<IntPtr Function(Handle, Pointer<Void>)>(//# 10: compile-time error
   ^
../../tests/ffi/vmspecific_static_checks_ffinative_test.dart:74:4: Error: Only classes extending NativeFieldWrapperClass1 can be passed as Pointer.
  @FfiNative<IntPtr Function(Pointer<Void>)>(//# 11: compile-time error
   ^

Failed: tests/ffi/vmspecific_static_checks_ffinative_test.dart
Running tests/ffi/vmspecific_static_checks_test.dart

../../tests/ffi/vmspecific_static_checks_test.dart:522:13: Error: 'EmptyStruct' is already declared in this scope.
final class EmptyStruct extends Struct {} //# 1100: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:520:13: Context: Previous declaration of 'EmptyStruct'.
final class EmptyStruct extends Struct {} //# 1099: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:530:13: Error: 'EmptyStruct' is already declared in this scope.
final class EmptyStruct extends Struct {} //# 1101: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:522:13: Context: Previous declaration of 'EmptyStruct'.
final class EmptyStruct extends Struct {} //# 1100: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:538:13: Error: 'EmptyStruct' is already declared in this scope.
final class EmptyStruct extends Struct {} //# 1102: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:530:13: Context: Previous declaration of 'EmptyStruct'.
final class EmptyStruct extends Struct {} //# 1101: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:548:13: Error: 'EmptyStruct' is already declared in this scope.
final class EmptyStruct extends Struct {} //# 1103: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:538:13: Context: Previous declaration of 'EmptyStruct'.
final class EmptyStruct extends Struct {} //# 1102: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:557:13: Error: 'EmptyStruct' is already declared in this scope.
final class EmptyStruct extends Struct {} //# 1104: compile-time error
            ^^^^^^^^^^^
../../tests/ffi/vmspecific_static_checks_test.dart:548:13: Context: Previous declaration of 'EmptyStruct'.
final class EmptyStruct extends Struct {} //# 1103: compile-time error
            ^^^^^^^^^^^

Failed: tests/ffi/vmspecific_static_checks_test.dart
Running tests/ffi/vmspecific_static_checks_varargs_test.dart

../../tests/ffi/vmspecific_static_checks_varargs_test.dart:26:26: Error: Expected type 'NativeFunction<Void Function(Pointer<Utf8>, VarArgs<(Int32, Int32, {Int32 foo})>)>' to be a valid and instantiated subtype of 'NativeType'.
 - 'NativeFunction' is from 'dart:ffi'.
 - 'Void' is from 'dart:ffi'.
 - 'Pointer' is from 'dart:ffi'.
 - 'Utf8' is from 'package:ffi/src/utf8.dart' ('../../third_party/pkg/ffi/lib/src/utf8.dart').
 - 'VarArgs' is from 'dart:ffi'.
 - 'Int32' is from 'dart:ffi'.
  print(ffiTestFunctions.lookupFunction< //# 1: compile-time error
                         ^
../../tests/ffi/vmspecific_static_checks_varargs_test.dart:31:26: Error: Expected type 'NativeFunction<Void Function(Pointer<Utf8>, VarArgs<(Int32, Int32)>, Int32)>' to be a valid and instantiated subtype of 'NativeType'.
 - 'NativeFunction' is from 'dart:ffi'.
 - 'Void' is from 'dart:ffi'.
 - 'Pointer' is from 'dart:ffi'.
 - 'Utf8' is from 'package:ffi/src/utf8.dart' ('../../third_party/pkg/ffi/lib/src/utf8.dart').
 - 'VarArgs' is from 'dart:ffi'.
 - 'Int32' is from 'dart:ffi'.
  print(ffiTestFunctions.lookupFunction< //# 2: compile-time error
                         ^

Failed: tests/ffi/vmspecific_static_checks_varargs_test.dart
Running tests/ffi/vmspecific_variance_function_checks_test.dart

../../tests/ffi/vmspecific_variance_function_checks_test.dart:29:19: Error: 'NaTyPointerParamOpDart' isn't a type.
    p1.asFunction<NaTyPointerParamOpDart>(); //# 1:  continued
                  ^^^^^^^^^^^^^^^^^^^^^^
../../tests/ffi/vmspecific_variance_function_checks_test.dart:34:8: Error: Expected type 'Pointer<Int64> Function()' to be 'Pointer<NativeType> Function()', which is the Dart type corresponding to 'NativeFunction<Pointer<NativeType> Function()>'.
 - 'Pointer' is from 'dart:ffi'.
 - 'Int64' is from 'dart:ffi'.
 - 'NativeType' is from 'dart:ffi'.
 - 'NativeFunction' is from 'dart:ffi'.
    p2.asFunction<Int64PointerReturnOp>(); //# 2:  continued
       ^
../../tests/ffi/vmspecific_variance_function_checks_test.dart:41:6: Error: Expected type 'Pointer<NativeFunction<Pointer<Int8> Function()>> Function()' to be 'Pointer<NativeFunction<Pointer<NativeType> Function()>> Function()', which is the Dart type corresponding to 'NativeFunction<Pointer<NativeFunction<Pointer<NativeType> Function()>> Function()>'.
 - 'Pointer' is from 'dart:ffi'.
 - 'NativeFunction' is from 'dart:ffi'.
 - 'Int8' is from 'dart:ffi'.
 - 'NativeType' is from 'dart:ffi'.
    .asFunction< //# 10:  continued
     ^
../../tests/ffi/vmspecific_variance_function_checks_test.dart:61:13: Error: Expected type 'void Function(Pointer<NativeType>)' to be 'void Function(Pointer<Int64>)', which is the Dart type corresponding to 'NativeFunction<Void Function(Pointer<Int64>)>'.
 - 'Pointer' is from 'dart:ffi'.
 - 'NativeType' is from 'dart:ffi'.
 - 'Int64' is from 'dart:ffi'.
 - 'NativeFunction' is from 'dart:ffi'.
 - 'Void' is from 'dart:ffi'.
    Pointer.fromFunction<Int64PointerParamOp>(//# 3:  continued
            ^
../../tests/ffi/vmspecific_variance_function_checks_test.dart:64:13: Error: Expected type 'Pointer<Int64> Function()' to be 'Pointer<NativeType> Function()', which is the Dart type corresponding to 'NativeFunction<Pointer<NativeType> Function()>'.
 - 'Pointer' is from 'dart:ffi'.
 - 'Int64' is from 'dart:ffi'.
 - 'NativeType' is from 'dart:ffi'.
 - 'NativeFunction' is from 'dart:ffi'.
    Pointer.fromFunction<NaTyPointerReturnOp>(//# 4:  continued
            ^

Failed: tests/ffi/vmspecific_variance_function_checks_test.dart
